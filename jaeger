        static void Main(string[] args)
        {
            //test logger
            ILoggerFactory loggerFactory = new LoggerFactory().AddConsole().AddDebug(LogLevel.Information);
            ILogger<Program> logger = loggerFactory.CreateLogger<Program>();
            logger.LogError("日志");

            //1
            var serviceName = "Skyline";
            var reporter = new LoggingReporter(loggerFactory);
            var sampler = new ConstSampler(true);
            var tracer = new Tracer.Builder(serviceName)
                .WithLoggerFactory(loggerFactory)
                .WithReporter(reporter)
                .WithSampler(sampler)
                .Build();

            logspan(tracer);

            Console.WriteLine("开始");

            //2
            var serviceName2 = "Skyline2";

            Configuration.SamplerConfiguration samplerConfiguration = new Configuration.SamplerConfiguration(loggerFactory)
                .WithParam(1)
                .WithType("const");

            Configuration.SenderConfiguration senderConfig = new Configuration.SenderConfiguration(loggerFactory)
                .WithEndpoint("http://192.168.31.207:14268/api/traces");
                
            
            Configuration.ReporterConfiguration reporterConfiguration = new Configuration.ReporterConfiguration(loggerFactory)
                .WithSender(senderConfig);





            Configuration configuration = new Configuration(serviceName2,loggerFactory)
                .WithReporter(reporterConfiguration)
                .WithSampler(samplerConfiguration);


            var tracer2 = configuration.GetTracerBuilder().WithTraceId128Bit().WithLoggerFactory(loggerFactory).Build();
           






            logspan(tracer2);
            

            Console.WriteLine("Hello World!");
            Console.ReadKey();
        }

        static void logspan(ITracer tracer)
        {

            var builder = tracer.BuildSpan("Get::api/values/");
            builder.WithTag("machine.name", "machine1").WithTag("cpu.cores", 8);
            var startTime = DateTimeOffset.Now;
            var span = builder.WithStartTimestamp(startTime).Start();

            var logData = new List<KeyValuePair<string, object>>();
            logData.Add(KeyValuePair.Create<string, object>("handling number of events", 6));
            span.Log(DateTimeOffset.Now, logData);
            

            var @vent = "loop_finished";
            span.Log(DateTimeOffset.Now, @vent);
            span.Finish(DateTimeOffset.Now);

        }
